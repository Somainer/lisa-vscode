{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Lisa Lang",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#comment-lines"
        },
        {
            "include": "#shebang"
        },
        {
            "include": "#expression"
        }
    ],
    "repository": {
        "shebang": {
            "name": "comment.line.shebang.lisa",
            "match": "\\A(#!).*(?=$)",
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.lisa"
              }
           }
       },
       "statements": {
           "patterns": [
               { "include": "#comment-lines" },
               { "include": "#expression" }
           ]
       },
       "expression": {
           "patterns": [
               { "include": "#literals" },
               { "include": "#sexpr" }
           ]
       },
       "literals": {
           "patterns": [
               { "include": "#non-symbolic-literals" },
               { "include": "#symbolic-literals" }
           ]
       },
       "non-symbolic-literals": {
           "patterns": [
               { "include": "#atoms" },
               { "include": "#strings" },
               { "include": "#boolean-literals" },
               { "include": "#numbers" },
               { "include": "#static-field-accessors" },
               { "include": "#quoted" }
           ]
       },
       "symbolic-literals": {
           "patterns": [
               { "include": "#splicing-symbol" },
               { "include": "#dot-accessors" },
               { "include": "#symbols" },
               { "include": "#positional-args" }
           ]
       },
       "boolean-literals": {
           "patterns": [
               {
                   "name": "constant.language.boolean.true.lisa",
                   "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
               },
               {
                   "name": "constant.language.boolean.false.lisa",
                   "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
               }
           ]
       },
       "numbers": {
            "match": "\\b(([0-9.]*[0-9]+)|(\\.[0-9]+))\\b",
            "name": "constant.numeric.lisa"
       },
       "dot-accessors": {
           "begin": "(?<!\\w)\\.",
           "end": "\\s",
           "name": "entity.name.selector"
       },
       "static-field-accessors": {
           "match": "\\b([\\w\\.]+)/(\\w+)\\b",
           "captures": {
               "1": {
                   "name": "entity.name.class"
               },
               "2": {
                   "name": "entity.name.method"
               }
           }
       },
       "atoms": {
           "patterns": [
               {
                   "name": "constant.other",
                   "match": "(?<!\\w):[\\w\\-\\/]+\\b"
               },
               {
                   "begin": "(?<!\\w):\"",
                   "end": "\"\\b",
                   "name": "constant.other",
                   "patterns": [
                       { "include": "#string-character-escape" }
                   ]
               }
           ]
       },
       "splicing-symbol": {
           "match": "(\\.\\.\\.)",
           "captures": {
               "1": {
                   "name": "entity.name.selectors.lisa"
               }
           },
           "patterns": [
               { "include": "#symbols" }
           ]
       },
       "symbols": {
           "patterns": [
               {
                   "match": "([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*\\|][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d\\|]*)",
                   "name": "variable.name.lisa"
               },
               {
                   "name": "variable.name.lisa",
                    "begin": "`",
                    "end": "`",
                    "patterns": [
                        { "include": "$self" }
                    ]
               }
           ]
       },
       "positional-args": {
            "match": "(?<!\\w)#[\\d]*(?!\\d)",
            "name": "variable.language"
       },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.lisa",
                    "match": "\\b(if|cond|let|define[\\w\\-!]*|lambda)(?=\\s)"
                },
                {
                    "name": "storage.modifier.import.lisa",
                    "match": "\\b(import-env!|load!)"
                },
                {
                    "name": "constant.language",
                    "match": "\\b_\\b"
                }
            ]
        },
        "string-character-escape": {
            "name": "constant.character.escape.lisa",
            "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
        },  
        "double-quoted-strings": {
            "name": "string.quoted.double.lisa",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "triple-double-quoted-strings": {
            "name": "string.quoted.triple.lisa",
            "begin": "\"\"\"",
            "end": "\"\"\"(?!\")",
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "string-interpolations": {
            "patterns": [
                {
                    "name": "meta.template.expression.lisa",
                    "begin": "\\$\\{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.template-expression.begin.lisa"
                        }
                    },
                    "end": "}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.template-expression.end.lisa"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#symbols"
                        },
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "name": "meta.template.expression.lisa",
                    "match": "(\\$)([a-zA-Z0-9]+)",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.template-expression.begin.lisa"
                        },
                        "2": {
                            "name": "entity.name.tag.template-expression.expression.lisa"
                        }
                    }
                },
                {
                    "name": "constant.character.escape.interpolation.lisa",
                    "match": "\\$\\$"
                }
            ]
        },
        "double-quoted-template-strings": {
            "name": "string.template.lisa",
            "begin": "([^':()\"\\s]+)?(\")",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.tagged-template.lisa"
                },
                "2": {
                    "name": "punctuation.definition.string.template.begin.lisa"
                }
            },
            "end": "(\")",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.template.end.lisa"
                }
            },
            "patterns": [
                {
                    "include": "#string-interpolations"
                },
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "triple-quoted-template-strings": {
            "name": "string.template.lisa",
            "begin": "([^':()\"\\s]+)?(\"\"\")",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.tagged-template.lisa"
                },
                "2": {
                    "name": "punctuation.definition.string.template.begin.lisa"
                }
            },
            "end": "(\"\"\")(?!\")",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.template.end.lisa"
                }
            },
            "patterns": [
                {
                    "include": "#string-interpolations"
                },
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "template-strings": {
            "patterns": [
                { "include": "#triple-quoted-template-strings" },
                { "include": "#double-quoted-template-strings" }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "include": "#triple-double-quoted-strings"
                },
                {
                    "include": "#double-quoted-strings"
                },
                {
                    "include": "#template-strings"
                }
            ]
        },
        "comment-lines": {
            "patterns": [
                { "include": "#document-line-comment" },
                { "include": "#one-line-comment" }
            ]
        },
        "one-line-comment": {
            "name": "comment.line.lisa",
            "begin": ";",
            "end": "$",
            "patterns": [
                {
                    "name": "constant.character.lisa",
                    "match": "\\\\."
                }
            ]
        },
        "document-line-comment": {
            "name": "comment.block.documentation.lisa",
            "begin": ";;",
            "end": "$"
        },
        "quoted": {
            "begin": "(('|`')\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.section.expression.begin.lisa"
                }
            },
            "end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
            "endCaptures": {
                "1": {
                    "name": "punctuation.section.expression.end.trailing.lisa"
                },
                "2": {
                    "name": "punctuation.section.expression.end.trailing.lisa"
                },
                "3": {
                    "name": "punctuation.section.expression.end.lisa"
                }
            },
            "name": "markup.italic",
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        },
        "sexpr": {
            "begin": "(\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.section.expression.begin.lisa"
                }
            },
            "end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
            "endCaptures": {
                "1": {
                    "name": "punctuation.section.expression.end.trailing.lisa"
                },
                "2": {
                    "name": "punctuation.section.expression.end.trailing.lisa"
                },
                "3": {
                    "name": "punctuation.section.expression.end.lisa"
                }
            },
            "name": "meta.expression.lisa",
            "patterns": [
                {
                    "begin": "(?<=\\()(declare)\\s+",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.lisa"
                        }
                    },
                    "end": "(?=\\))",
                    "patterns": [
                        {
                            "match": "([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)",
                            "name": "entity.name.tag.lisa"
                        }
                    ]
                },
                {
                    "begin": "(?<=\\()(define)\\s+([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)\\s+",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.lisa"
                        },
                        "2": {
                            "name": "entity.name.tag.lisa"
                        }
                    },
                    "end": "(?=\\))",
                    "patterns": [
                        { "include": "#statements" }
                    ]
                },
                {
                    "begin": "(?<=\\()(lambda|define[\\w\\d._:+=><!?*-]*|[\\w._:+=><!?*-][\\w\\d._:+=><!?*-]*\\/def[\\w\\d._:+=><!?*-]*)\\s+",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.lisa"
                        }
                    },
                    "end": "(?=\\))",
                    "name": "meta.definition.global.lisa",
                    "patterns": [
                        {
                            "include": "#statements"
                        }
                    ]
                },
                {
                    "include": "#non-symbolic-literals"
                },
                {
                    "match": "(?<=\\()(.+?)(?=\\s|\\))",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.lisa"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                },
                {
                    "include": "$self"
                }
            ]
        }
    },
    "scopeName": "source.lisa"
}
